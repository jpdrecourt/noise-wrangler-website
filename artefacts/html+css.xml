<documents>
<document index="1">
<source>./css/style.css</source>
<document_content>
/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family:
    system-ui,
    -apple-system,
    sans-serif;
  line-height: 1.6;
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  color: #333;
}

/* Header styles */
header {
  margin-bottom: 4rem;
  text-align: center;
}

/* Featured articles grid */
.featured-articles {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  margin-bottom: 4rem;
  padding: 2rem 0;
  border-bottom: 2px solid #eee;
}

.featured-card {
  display: flex;
  flex-direction: column;
  background: #fff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgb(0 0 0 / 10%);
  transition: transform 0.2s ease;
  cursor: pointer;
}

.featured-card:hover {
  transform: translateY(-4px);
}

.featured-image {
  width: 100%;
  aspect-ratio: 16/9;
  object-fit: cover;
}

.featured-content {
  padding: 1.5rem;
}

.featured-content h3 {
  margin-bottom: 0.5rem;
  font-size: 1.25rem;
}

.featured-excerpt {
  color: #666;
  font-size: 0.95rem;
  margin-bottom: 1rem;
}

.featured-meta {
  font-size: 0.85rem;
  color: #888;
}

/* Regular articles section */
.articles-section {
  margin-top: 4rem;
}

.section-title {
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #eee;
}

/* Article styles */
article {
  margin-bottom: 4rem;
  padding-bottom: 2rem;
  border-bottom: 1px solid #eee;
  opacity: 0;
  transform: translateY(20px);
  transition:
    opacity 0.5s ease,
    transform 0.5s ease;
}

article.visible {
  opacity: 1;
  transform: translateY(0);
}

.article-meta {
  color: #666;
  font-size: 0.9rem;
  margin-bottom: 1rem;
}

h1 {
  margin-bottom: 1rem;
}

h2 {
  margin-bottom: 0.5rem;
}

p {
  margin-bottom: 1rem;
}

/* Loading indicator */
.loading {
  text-align: center;
  padding: 2rem;
  color: #666;
  display: none;
}

/* Responsive adjustments */
@media (width <= 600px) {
  body {
    padding: 1rem;
  }

  .featured-articles {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .featured-content {
    padding: 1rem;
  }
}

</document_content>
</document>
<document index="2">
<source>index.html</source>
<document_content>
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="The website of sound artist Jean-Philippe Drecourt"
    />
    <link rel="stylesheet" href="css/style.css" />
    <title>Noise Wrangler</title>
  </head>
  <body class="body">
    <header>
      <div id="title">
        <img
          id="logo"
          src="media/Noise-Wrangler-logo-rounded.svg"
          alt="Noise Wrangler Logo"
        />
        <div id="title-text">
          <h1>Noise Wrangler</h1>
          <p>Works by sound artist Jean-Philippe Drecourt</p>
        </div>
      </div>
    </header>
    <section id="featured" class="featured-articles">
      <!-- Featured articles will be loaded here -->
    </section>

    <section class="articles-section">
      <h2 class="section-title">Latest Articles</h2>
      <main id="content">
        <!-- Regular articles will be loaded here -->
      </main>
    </section>

    <div id="loading" class="loading">Loading more posts...</div>
    <script src="js/main.js"></script>
  </body>
</html>

</document_content>
</document>
<document index="3">
<source>./articles/2025-02-07-first-article.html</source>
<document_content>
<article data-featured="true">
  <h2>First Article</h2>
  <div class="article-meta">
    <time datetime="2025-02-10">February 10, 2025</time>
  </div>
  <!-- Featured image and excerpt are only needed for featured articles -->
  <div class="article-featured">
    <img src="/images/article1-featured.jpg" alt="Description of image" />
    <p class="featured-excerpt">
      A brief excerpt of the article that will appear in the featured section.
      Make it catchy and informative!
    </p>
  </div>
  <div class="article-content">
    <p>Full article content goes here...</p>
  </div>
</article>

</document_content>
</document>
<document index="4">
<source>./articles/2025-02-09-second-article.html</source>
<document_content>
<article>
  <h2>Second Article</h2>
  <div class="article-meta">
    <time datetime="2025-02-09">February 9, 2025</time>
  </div>
  <div class="article-content">
    <p>Regular article content...</p>
  </div>
</article>

</document_content>
</document>
<document index="5">
<source>./js/main.js</source>
<document_content>
// Global variables
let loadedArticles = 0
const ARTICLES_PER_BATCH = 5
let loading = false
let hasMore = true
let featuredLoaded = false
let cachedArticlesList = null
const articlesDirectory = './articles/'

// Initialize Intersection Observer for lazy loading
const observer = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting && !loading && hasMore) {
        loadNextBatch()
      }
    })
  },
  {
    rootMargin: '100px',
    threshold: 0.1,
  }
)

// Observe loading indicator
observer.observe(document.getElementById('loading'))

// Get the list of articles from the articles directory
async function getAllArticles() {
  if (cachedArticlesList) return cachedArticlesList

  try {
    // List all files in the articles directory
    const articles = await fetch(articlesDirectory)
      .then((response) => response.text())
      .then((html) => {
        const parser = new DOMParser()
        const doc = parser.parseFromString(html, 'text/html')

        // Get all links that match our article pattern
        const links = Array.from(doc.querySelectorAll('a'))
          .map((a) => a.href)
          .filter((href) => /\d{4}-\d{2}-\d{2}.*\.html$/.test(href))
          .map((href) => href.split('/').pop())

        // Sort by date (newest first)
        return links.sort().reverse()
      })

    cachedArticlesList = articles
    return articles
  } catch (error) {
    console.error('Error fetching articles:', error)
    return []
  }
}

// Load featured articles
async function loadFeaturedArticles() {
  if (featuredLoaded) return

  try {
    const articlesList = await getAllArticles()
    const featuredSection = document.getElementById('featured')

    // Load all articles and find the featured ones
    let featuredCount = 0
    for (const articleFile of articlesList) {
      if (featuredCount >= 3) break

      const articleResponse = await fetch(`${articlesDirectory}${articleFile}`)
      if (!articleResponse.ok) continue

      const html = await articleResponse.text()
      const tempDiv = document.createElement('div')
      tempDiv.innerHTML = html

      const article = tempDiv.querySelector('article')
      if (article.dataset.featured === 'true') {
        // Extract article data
        const title = article.querySelector('h2').textContent
        const date = article.querySelector('time').textContent
        const image = article.querySelector('.article-featured img').src
        const excerpt = article.querySelector('.featured-excerpt').textContent

        // Create featured card
        const featuredCard = createFeaturedCard(title, date, image, excerpt)
        featuredSection.appendChild(featuredCard)
        featuredCount++
      }
    }

    featuredLoaded = true
  } catch (error) {
    console.error('Error loading featured articles:', error)
  }
}

// Create featured card element
function createFeaturedCard(title, date, image, excerpt) {
  const featuredCard = document.createElement('div')
  featuredCard.className = 'featured-card'
  featuredCard.innerHTML = `
        <img class="featured-image" src="${image}" alt="${title}" loading="lazy" />
        <div class="featured-content">
            <h3>${title}</h3>
            <p class="featured-excerpt">${excerpt}</p>
            <div class="featured-meta">${date}</div>
        </div>
    `

  featuredCard.addEventListener('click', () => {
    window.location.hash = title.toLowerCase().replace(/[^a-z0-9]+/g, '-')
  })

  return featuredCard
}

// Get filtered article list
async function getArticlesList() {
  const articles = await getAllArticles()
  const filteredArticles = []

  for (const articleFile of articles) {
    const response = await fetch(`${articlesDirectory}${articleFile}`)
    if (!response.ok) continue

    const html = await response.text()
    const tempDiv = document.createElement('div')
    tempDiv.innerHTML = html

    if (tempDiv.querySelector('article').dataset.featured !== 'true') {
      filteredArticles.push(articleFile)
    }
  }

  return filteredArticles
}

// Load next batch of articles
async function loadNextBatch() {
  if (loading || !hasMore) return
  loading = true
  const loadingIndicator = document.getElementById('loading')
  loadingIndicator.style.display = 'block'

  try {
    const articlesList = await getArticlesList()
    const batch = articlesList.slice(
      loadedArticles,
      loadedArticles + ARTICLES_PER_BATCH
    )

    if (batch.length === 0) {
      hasMore = false
      loadingIndicator.style.display = 'none'
      observer.disconnect()
      return
    }

    // Load each article in the batch
    const content = document.getElementById('content')
    for (const articleFile of batch) {
      const response = await fetch(`${articlesDirectory}${articleFile}`)
      if (!response.ok) continue

      const html = await response.text()
      const tempDiv = document.createElement('div')
      tempDiv.innerHTML = html

      const article = tempDiv.firstElementChild
      article.classList.add('visible')
      content.appendChild(article)
    }

    loadedArticles += batch.length
  } catch (error) {
    console.error('Error loading articles:', error)
    loadingIndicator.textContent = 'Error loading posts. Scroll to try again.'
  } finally {
    loading = false
  }
}

// Handle deep linking
function handleDeepLink() {
  const hash = window.location.hash.slice(1)
  if (hash) {
    const article = document.querySelector(`article[id="${hash}"]`)
    if (article) {
      article.scrollIntoView({ behavior: 'smooth' })
    }
  }
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
  loadFeaturedArticles()
  loadNextBatch()
  window.addEventListener('hashchange', handleDeepLink)
})

</document_content>
</document>
</documents>
